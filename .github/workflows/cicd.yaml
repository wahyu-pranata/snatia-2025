name: Laravel CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip, bcmath, soap, intl, exif, iconv
        coverage: none

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite


  deploy:
    needs: laravel-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip, bcmath, soap, intl, exif, iconv

    - name: Install dependencies
      run: composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader --no-dev

    - name: Install lftp for FTP operations
      run: sudo apt-get update && sudo apt-get install -y lftp

    - name: Prepare files for deployment
      run: |
        # Remove files that shouldn't be deployed
        rm -rf .git
        rm -rf node_modules
        rm -rf tests
        rm -f .env.example
        rm -f .gitignore
        rm -f README.md
        rm -f phpunit.xml
        rm -f webpack.mix.js
        rm -f package*.json
        rm -rf .github

        # Clear any existing logs
        rm -f storage/logs/*.log

        # Create empty log file
        touch storage/logs/laravel.log

    - name: Create FTP deployment script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash

        # FTP Configuration
        FTP_HOST="${{ secrets.FTP_HOST }}"
        FTP_USER="${{ secrets.FTP_USERNAME }}"
        FTP_PASS="${{ secrets.FTP_PASSWORD }}"
        FTP_PORT="${{ secrets.FTP_PORT }}"
        REMOTE_DIR="${{ secrets.FTP_SERVER_DIR }}"

        # Set default port if not provided
        if [ -z "$FTP_PORT" ]; then
            FTP_PORT="21"
        fi

        # Set default remote directory if not provided
        if [ -z "$REMOTE_DIR" ]; then
            REMOTE_DIR="/"
        fi

        echo "Starting FTP deployment..."
        echo "Host: $FTP_HOST"
        echo "User: $FTP_USER"
        echo "Port: $FTP_PORT"
        echo "Remote Directory: $REMOTE_DIR"

        # Create lftp script
        cat > ftp_commands.txt << 'FTPEOF'
        set ftp:ssl-allow no
        set ftp:ssl-force no
        set ssl:verify-certificate no
        set ftp:passive-mode on
        open -p PORT -u USER,PASS HOST
        cd REMOTE_DIR

        # Upload all files
        mirror --reverse --delete --verbose --exclude-glob .env --exclude-glob storage/logs/*.log ./ ./

        # Set proper permissions
        chmod 755 public
        chmod -R 755 storage
        chmod -R 755 bootstrap/cache

        quit
        FTPEOF

        # Replace placeholders in FTP script
        sed -i "s/HOST/$FTP_HOST/g" ftp_commands.txt
        sed -i "s/USER/$FTP_USER/g" ftp_commands.txt
        sed -i "s/PASS/$FTP_PASS/g" ftp_commands.txt
        sed -i "s/PORT/$FTP_PORT/g" ftp_commands.txt
        sed -i "s|REMOTE_DIR|$REMOTE_DIR|g" ftp_commands.txt

        # Execute FTP commands
        lftp -f ftp_commands.txt

        if [ $? -eq 0 ]; then
            echo "✅ FTP deployment successful!"
        else
            echo "❌ FTP deployment failed!"
            exit 1
        fi

        # Clean up
        rm -f ftp_commands.txt
        EOF

        chmod +x deploy.sh

    - name: Deploy via FTP
      run: ./deploy.sh